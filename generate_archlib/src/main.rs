use std::path::Path;
use std::fs;
use std::env;

use rusty_vm_lib::assembly::LIBRARY_ENV_VARIABLE;
use rusty_vm_lib::interrupts::Interrupts;
use rusty_vm_lib::vm::{ErrorCodes, ADDRESS_SIZE};


const ARCH_LIB_NAME: &str = "archlib.asm";


fn exit(message: &str) -> ! {
    eprintln!("{}", message);
    std::process::exit(1);
}


fn main() {

    let library_dir = env::var_os(LIBRARY_ENV_VARIABLE)
        .unwrap_or_else(|| exit(format!("Could not read environment variable {LIBRARY_ENV_VARIABLE}").as_str()));

    let library_dir = Path::new(&library_dir);
    let arch_lib_path = library_dir.join(ARCH_LIB_NAME);

    let asm = format!("

# Generated {GENERATED_AT}
# This is an automatically generated library file. Do not edit this file manually.
# This file contains enrivonment variables for the VM architecture.


.text:

    %%- PRINT_SIGNED: {PRINT_SIGNED_CODE}
    %%- PRINT_UNSIGNED:{PRINT_UNSIGNED_CODE}
    %%- PRINT_FLOAT: {PRINT_FLOAT_CODE}
    %%- PRINT_CHAR: {PRINT_CHAR_CODE}
    %%- PRINT_STRING: {PRINT_STRING_CODE}
    %%- PRINT_BYTES: {PRINT_BYTES_CODE}

    %%- INPUT_SIGNED: {INPUT_SIGNED_CODE}
    %%- INPUT_UNSIGNED: {INPUT_UNSIGNED_CODE}
    %%- INPUT_BYTE: {INPUT_BYTE_CODE}
    %%- INPUT_STRING: {INPUT_STRING_CODE}
    %%- STDIN_HAS_DATA: {STDIN_HAS_DATA_CODE}

    %%- RANDOM: {RANDOM_CODE}

    %%- HOST_TIME_NANOS: {HOST_TIME_NANOS_CODE}
    %%- ELAPSED_TIME_NANOS: {ELAPSED_TIME_NANOS_CODE}

    %%- DISK_READ: {DISK_READ_CODE}
    %%- DISK_WRITE: {DISK_WRITE_CODE}

    %%- TERM_INTR: {TERM_INTR_CODE}

    %%- SET_TIMER_NANOS: {SET_TIMER_NANOS_CODE}

    %%- FLUSH_STDOUT: {FLUSH_STDOUT_CODE}

    %%- HOST_FS_INTR: {HOST_FS_INTR_CODE}


    %%- NO_ERROR: {NO_ERROR_CODE}
    %%- END_OF_FILE: {END_OF_FILE_CODE}
    %%- INVALID_INPUT: {INVALID_INPUT_CODE}
    %%- ZERO_DIVISION: {ZERO_DIVISION_CODE}
    %%- STACK_OVERFLOW: {STACK_OVERFLOW_CODE}
    %%- OUT_OF_BOUNDS: {OUT_OF_BOUNDS_CODE}
    %%- UNALIGNED_ADDRESS: {UNALIGNED_ADDRESS_CODE}
    %%- PERMISSION_DENIED: {PERMISSION_DENIED_CODE}
    %%- TIMED_OUT: {TIMED_OUT_CODE}
    %%- NOT_FOUND: {NOT_FOUND_CODE}
    %%- ALREADY_EXISTS: {ALREADY_EXISTS_CODE}
    %%- INVALID_DATA: {INVALID_DATA_CODE}
    %%- INTERRUPTED: {INTERRUPTED_CODE}
    %%- OUT_OF_MEMORY: {OUT_OF_MEMORY_CODE}
    %%- WRITE_ZERO: {WRITE_ZERO_CODE}
    %%- MODULE_UNAVAILABLE: {MODULE_UNAVAILABLE_CODE}

    %%- GENERIC_ERROR: {GENERIC_ERROR_CODE}


    %%- ADDRESS_SIZE: {ADDRESS_SIZE}

    ",
        GENERATED_AT = chrono::Utc::now().to_rfc2822(),
        PRINT_SIGNED_CODE = Interrupts::PrintSigned as u8,
        PRINT_UNSIGNED_CODE = Interrupts::PrintUnsigned as u8,
        PRINT_FLOAT_CODE = Interrupts::PrintFloat as u8,
        PRINT_CHAR_CODE = Interrupts::PrintChar as u8,
        PRINT_STRING_CODE = Interrupts::PrintString as u8,
        PRINT_BYTES_CODE = Interrupts::PrintBytes as u8,
        INPUT_SIGNED_CODE = Interrupts::InputSignedInt as u8,
        INPUT_UNSIGNED_CODE = Interrupts::InputUnsignedInt as u8,
        INPUT_BYTE_CODE = Interrupts::InputByte as u8,
        INPUT_STRING_CODE = Interrupts::InputString as u8,
        STDIN_HAS_DATA_CODE = Interrupts::StdinHasData as u8,
        RANDOM_CODE = Interrupts::Random as u8,
        HOST_TIME_NANOS_CODE = Interrupts::HostTimeNanos as u8,
        ELAPSED_TIME_NANOS_CODE = Interrupts::ElapsedTimeNanos as u8,
        DISK_READ_CODE = Interrupts::DiskRead as u8,
        DISK_WRITE_CODE = Interrupts::DiskWrite as u8,
        TERM_INTR_CODE = Interrupts::Terminal as u8,
        SET_TIMER_NANOS_CODE = Interrupts::SetTimerNanos as u8,
        FLUSH_STDOUT_CODE = Interrupts::FlushStdout as u8,
        HOST_FS_INTR_CODE = Interrupts::HostFs as u8,
        NO_ERROR_CODE = ErrorCodes::NoError as u8,
        END_OF_FILE_CODE = ErrorCodes::EndOfFile as u8,
        INVALID_INPUT_CODE = ErrorCodes::InvalidInput as u8,
        ZERO_DIVISION_CODE = ErrorCodes::ZeroDivision as u8,
        STACK_OVERFLOW_CODE = ErrorCodes::StackOverflow as u8,
        OUT_OF_BOUNDS_CODE = ErrorCodes::OutOfBounds as u8,
        UNALIGNED_ADDRESS_CODE = ErrorCodes::UnalignedAddress as u8,
        PERMISSION_DENIED_CODE = ErrorCodes::PermissionDenied as u8,
        TIMED_OUT_CODE = ErrorCodes::TimedOut as u8,
        NOT_FOUND_CODE = ErrorCodes::NotFound as u8,
        ALREADY_EXISTS_CODE = ErrorCodes::AlreadyExists as u8,
        INVALID_DATA_CODE = ErrorCodes::InvalidData as u8,
        INTERRUPTED_CODE = ErrorCodes::Interrupted as u8,
        OUT_OF_MEMORY_CODE = ErrorCodes::OutOfMemory as u8,
        WRITE_ZERO_CODE = ErrorCodes::WriteZero as u8,
        MODULE_UNAVAILABLE_CODE = ErrorCodes::ModuleUnavailable as u8,
        GENERIC_ERROR_CODE = ErrorCodes::GenericError as u8,
        ADDRESS_SIZE = ADDRESS_SIZE
    );

    fs::write(&arch_lib_path, asm)
        .unwrap_or_else(|err| exit(format!("Could not write library file {}:\n{}", arch_lib_path.display(), err).as_str()));

    println!("Generated ASM library file {}", arch_lib_path.display());
}
