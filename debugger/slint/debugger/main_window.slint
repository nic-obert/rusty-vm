import { Styling } from "../styling.slint";
// import { HorizontalSplitter } from "utils.slint";

import { ActionButtons } from "action_buttons.slint";
import { MemoryArea } from "memory.slint";
import { BreakpointArea, BreakPoint } from "breakpoints.slint";
import { RegistersArea } from "registers.slint";
import { InstructionsArea } from "instructions.slint";
import { VMStatusArea } from "vm_status.slint";
import { Backend } from "backend.slint";

export { Backend } from "backend.slint";
export { BreakPoint } from "breakpoints.slint";


export component DebuggerMainWindow inherits Window {

    in-out property <string> memory_view <=> memory_area.memory_view;
    in-out property <string> memory_lines <=> memory_area.memory_lines;
    in-out property <string> memory_start <=> memory_area.memory_start;
    in-out property <string> memory_span <=> memory_area.memory_span;
    in-out property <bool> memory_span_valid <=> memory_area.mem_span_valid;
    in-out property <bool> memory_start_valid <=> memory_area.mem_start_valid;
    in-out property <[[string]]> register_sets <=> registers_area.register_sets;
    in-out property <[BreakPoint]> breakpoints <=> breakpoint_area.breakpoints;
    in-out property <[string]> instructions_disassembly <=> instructions_area.instructions;
    in-out property <string> source_file <=> instructions_area.source_file;
    in-out property <string> source_code <=> instructions_area.source_code;
    in-out property <string> source_lines <=> instructions_area.source_lines;

    // TODO: find another way to autoscroll
    callback scroll_to_bottom_registers_view <=> registers_area.scroll_to_bottom;
    callback scroll_to_bottom_instructions_view <=> instructions_area.disassembly_scroll_to_bottom;

    VerticalLayout {

        spacing: Styling.inter_area_spacing;

        vm_status_area := VMStatusArea {}

        HorizontalLayout {

            height: 400px;
            spacing: Styling.inter_area_spacing;

            memory_area := MemoryArea {}
            breakpoint_area := BreakpointArea {}
            registers_area := RegistersArea {}

        }


        HorizontalLayout {

            instructions_area := InstructionsArea {
                // width: splitter.x;
            }

            action_buttons := ActionButtons {
                // width: root.width - splitter.x;
            }
        }
    }

    // splitter := HorizontalSplitter {

    //     height: 100%;
    //     y: instructions-area.absolute-position.y;
    //     min-x: root.x + instructions-area.min-width;
    //     max-x: root.width - action-buttons.min-width;

    // }

}
